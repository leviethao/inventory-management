[{"/Users/necvn/Documents/inventory-management/src/index.js":"1","/Users/necvn/Documents/inventory-management/src/App.js":"2","/Users/necvn/Documents/inventory-management/src/views/manage-import/Index.js":"3","/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/LandingPage.js":"4","/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/RegisterPage.js":"5","/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/ProfilePage.js":"6","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Footer/Footer.js":"7","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/PageHeader/PageHeader.js":"8","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/IndexNavbar.js":"9","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/ExamplesNavbar.js":"10","/Users/necvn/Documents/inventory-management/src/views/manage-import/variables/charts.js":"11","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Pagination.js":"12","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Navbars.js":"13","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Basics.js":"14","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Typography.js":"15","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/NucleoIcons.js":"16","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Notifications.js":"17","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Tabs.js":"18","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Signup.js":"19","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Download.js":"20","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/JavaScript.js":"21","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Examples.js":"22","/Users/necvn/Documents/inventory-management/src/views/manage-import/ManageImport.js":"23","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/index.js":"24","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/types.js":"25","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextField/index.js":"26","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/data.js":"27","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextareaAutosize/index.js":"28","/Users/necvn/Documents/inventory-management/src/services/api/index.js":"29","/Users/necvn/Documents/inventory-management/src/config.js":"30","/Users/necvn/Documents/inventory-management/src/controllers/import-management/index.js":"31"},{"size":144,"mtime":1645624492587,"results":"32","hashOfConfig":"33"},{"size":1619,"mtime":1645865902290,"results":"34","hashOfConfig":"33"},{"size":2167,"mtime":1645635613169,"results":"35","hashOfConfig":"33"},{"size":22849,"mtime":1645635498077,"results":"36","hashOfConfig":"33"},{"size":7843,"mtime":1645635518340,"results":"37","hashOfConfig":"33"},{"size":16841,"mtime":1645635537949,"results":"38","hashOfConfig":"33"},{"size":4181,"mtime":1646270592490,"results":"39","hashOfConfig":"33"},{"size":1577,"mtime":1645635443668,"results":"40","hashOfConfig":"33"},{"size":7336,"mtime":1646270528883,"results":"41","hashOfConfig":"33"},{"size":5825,"mtime":1607439708000,"results":"42","hashOfConfig":"33"},{"size":2991,"mtime":1607439708000,"results":"43","hashOfConfig":"33"},{"size":7228,"mtime":1607439708000,"results":"44","hashOfConfig":"33"},{"size":17509,"mtime":1607439708000,"results":"45","hashOfConfig":"33"},{"size":9790,"mtime":1607439708000,"results":"46","hashOfConfig":"33"},{"size":7740,"mtime":1607439708000,"results":"47","hashOfConfig":"33"},{"size":3660,"mtime":1607439708000,"results":"48","hashOfConfig":"33"},{"size":2517,"mtime":1607439708000,"results":"49","hashOfConfig":"33"},{"size":8415,"mtime":1607439708000,"results":"50","hashOfConfig":"33"},{"size":5638,"mtime":1607439708000,"results":"51","hashOfConfig":"33"},{"size":3754,"mtime":1607439708000,"results":"52","hashOfConfig":"33"},{"size":15646,"mtime":1607439708000,"results":"53","hashOfConfig":"33"},{"size":2135,"mtime":1607439708000,"results":"54","hashOfConfig":"33"},{"size":2167,"mtime":1646561301507,"results":"55","hashOfConfig":"33"},{"size":22325,"mtime":1646920818185,"results":"56","hashOfConfig":"33"},{"size":382,"mtime":1646844095186,"results":"57","hashOfConfig":"33"},{"size":978,"mtime":1646564290036,"results":"58","hashOfConfig":"33"},{"size":15619,"mtime":1646845211663,"results":"59","hashOfConfig":"33"},{"size":861,"mtime":1646564302177,"results":"60","hashOfConfig":"33"},{"size":164,"mtime":1645624492587,"results":"61","hashOfConfig":"33"},{"size":119,"mtime":1646920968720,"results":"62","hashOfConfig":"33"},{"size":768,"mtime":1646836294060,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1m858vu",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/necvn/Documents/inventory-management/src/index.js",[],["131","132"],"/Users/necvn/Documents/inventory-management/src/App.js",["133"],"import React from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport \"assets/css/nucleo-icons.css\";\nimport \"assets/scss/blk-design-system-react.scss?v=1.2.0\";\nimport \"assets/demo/demo.css\";\n\nimport Index from \"./views/manage-import/Index\";\nimport LandingPage from \"./views/manage-import/examples/LandingPage\";\nimport RegisterPage from \"./views/manage-import/examples/RegisterPage\";\nimport ProfilePage from \"./views/manage-import/examples/ProfilePage\";\nimport ManageImport from \"views/manage-import/ManageImport\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\n\nconst App = () => {\n    return (\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <BrowserRouter>\n                <Switch>\n                <Route path=\"/\" render={(props) => <ManageImport {...props} />} />\n                <Route path=\"/components\" render={(props) => <Index {...props} />} />\n                <Route\n                    path=\"/landing-page\"\n                    render={(props) => <LandingPage {...props} />}\n                />\n                <Route\n                    path=\"/register-page\"\n                    render={(props) => <RegisterPage {...props} />}\n                />\n                <Route\n                    path=\"/profile-page\"\n                    render={(props) => <ProfilePage {...props} />}\n                />\n                {/* <Redirect from=\"/\" to=\"/components\" /> */}\n                </Switch>\n            </BrowserRouter>\n        </LocalizationProvider>\n    )\n}\nexport default App\n","/Users/necvn/Documents/inventory-management/src/views/manage-import/Index.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/LandingPage.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/RegisterPage.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/ProfilePage.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Footer/Footer.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/PageHeader/PageHeader.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/IndexNavbar.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/ExamplesNavbar.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/variables/charts.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Pagination.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Navbars.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Basics.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Typography.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/NucleoIcons.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Notifications.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Tabs.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Signup.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Download.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/JavaScript.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Examples.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/ManageImport.js",["134","135","136","137","138","139","140","141","142","143","144","145","146"],"import React, { useState } from \"react\";\n\n// core components\nimport IndexNavbar from \"./components/Navbars/IndexNavbar.js\";\nimport PageHeader from \"./components/PageHeader/PageHeader.js\";\nimport Footer from \"./components/Footer/Footer.js\";\n\n// sections for this page/view\nimport Basics from \"./IndexSections/Basics.js\";\nimport Navbars from \"./IndexSections/Navbars.js\";\nimport Tabs from \"./IndexSections/Tabs.js\";\nimport Pagination from \"./IndexSections/Pagination.js\";\nimport Notifications from \"./IndexSections/Notifications.js\";\nimport Typography from \"./IndexSections/Typography.js\";\nimport JavaScript from \"./IndexSections/JavaScript.js\";\nimport NucleoIcons from \"./IndexSections/NucleoIcons.js\";\nimport Signup from \"./IndexSections/Signup.js\";\nimport Examples from \"./IndexSections/Examples.js\";\nimport Download from \"./IndexSections/Download.js\";\nimport Table from \"./components/Table/index.js\";\nimport { headerList, objectToRow } from \"./components/Table/data.js\";\nimport { api } from \"services/api/index.js\";\nimport ImportManagementController from \"../../controllers/import-management/index.js\";\n\nexport default function ManageImport() {\n  const [dataList, setDataList] = useState([])\n\n  React.useEffect(() => {\n    document.body.classList.toggle(\"index-page\");\n    ImportManagementController.getOrders().then(res => {\n      console.log('data: ', res.data)\n      const rows = res.data.map(item => objectToRow(item))\n      setDataList(rows)\n      console.log('rows: ', rows)\n    })\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      document.body.classList.toggle(\"index-page\");\n    };\n  },[]);\n\n  return (\n    <>\n      <IndexNavbar />\n      <div className=\"wrapper\">\n        {/* <PageHeader /> */}\n        <div className=\"main\">\n          <Table headerList={headerList} dataList={dataList} />\n          {/* <Basics />\n          <Navbars />\n          <Tabs />\n          <Pagination />\n          <Notifications />\n          <Typography />\n          <JavaScript />\n          <NucleoIcons />\n          <Signup />\n          <Examples />\n          <Download /> */}\n        </div>\n        <Footer />\n      </div>\n    </>\n  );\n}\n","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/index.js",["147"],"import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport './styles.css'\nimport { headerList, dataList, options, createNewRow, rowToObject } from './data'\nimport DatePicker from '@mui/lab/DatePicker';\nimport TextField from '@mui/material/TextField';\nimport { OptionType, TableDataType } from './types'\nimport DebounceTextField from '../DebounceTextField';\nimport { Autocomplete, Button, Fab, Tooltip } from '@mui/material';\nimport DebounceTextareaAutosize from '../DebounceTextareaAutosize';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/RemoveCircle'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddCircleIcon from '@mui/icons-material/AddCircle'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle'\nimport EditIcon from '@mui/icons-material/Edit'\nimport CancelIcon from '@mui/icons-material/Cancel'\nimport IconButton from '@mui/material/IconButton';\nimport moment from 'moment';\nimport ImportManagementController from '../../../../controllers/import-management'\nimport Select from \"@mui/material/Select\"\nimport MenuItem from \"@mui/material/MenuItem\"\n\nconst headerListDefault = [...headerList]\nconst dataListDefault = [...dataList]\n\nconst Table = ({headerList = headerListDefault, dataList = dataListDefault, ...props}) => {\n    const [width, setWidth] = useState('100%')\n    const headerRef = useRef()\n    const [data, setData] = useState(dataList)\n\n    useEffect(() => {\n        // const mappedData = dataList.map(cells => ({cells: cells, editing: false}))\n        // setData(mappedData)\n        setData(dataList)\n    }, [dataList])\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (headerRef.current?.scrollWidth) {\n            setWidth(headerRef.current?.scrollWidth)\n            }\n        }\n        \n        handleResize()\n\n        window.addEventListener('resize', handleResize)\n\n        return () => {\n            window.removeEventListener('resize', handleResize)\n        }\n    }, [headerList, setWidth])\n\n    const onClickCreateNewRow = useCallback(() => {\n        setData(x => {\n            let newData = [...x]\n            newData.unshift({cells: createNewRow({}), editing: true})\n            return newData\n        })\n    }, [])\n\n    console.log('data: ', data)\n\n    const renderHeaderList = useCallback(() => {\n        return (\n            <div ref={headerRef} className='table-header'>\n                <div\n                    key={`table-header-item-#`}\n                    className='table-header-item'\n                >\n                    {'#'}\n                </div>\n                {headerList.map(item => (\n                    <div\n                        key={`table-header-item-${item.title}`}\n                        className='table-header-item'\n                        style={{width: item.width}}\n                    >\n                        {item.title}\n                    </div>\n                ))}\n            </div>\n        )\n    }, [headerList])\n\n    const onClickEditRow = useCallback((rowIndex) => {\n        return () => {\n            setData(x => {\n                let newData = [...x]\n                newData[rowIndex].editing = true\n                return newData\n            })\n        }\n    }, [])\n\n    const onClickCancelEditRow = useCallback((rowIndex) => {\n        return () => {\n            setData(x => {\n                let newData = [...x]\n                newData[rowIndex].editing = false\n                return newData\n            })\n        }\n    }, [])\n\n    const onClickSaveRow = useCallback((rowIndex) => {\n        return async () => {\n            const order = rowToObject(data[rowIndex].cells, data[rowIndex].Id)\n            const result = await ImportManagementController.updateOrder(order)\n            if (result.isSuccess) {\n                setData(x => {\n                    let newData = [...x]\n                    newData[rowIndex].editing = false\n                    return newData\n                })\n            }\n        }\n    }, [data])\n\n    const onClickDeleteRow = useCallback((rowIndex) => {\n        return async () => {\n            const result = await ImportManagementController.deleteOrder(data[rowIndex].Id)\n            if (result.isSuccess) {\n                setData(x => {\n                    let newData = [...x]\n                    newData.splice(rowIndex, 1)\n                    return newData\n                })\n            }\n        }\n    }, [data])\n\n    const onClickDeleteProduct = useCallback((rowIndex, cellIndex, productIndex) => {\n        return () => {\n            setData(x => {\n                let newData = [...x]\n                if (newData[rowIndex].cells[cellIndex].value) {\n                    newData[rowIndex].cells[cellIndex].value[productIndex].Deleted = true\n                }\n                return newData\n            })\n        }\n    }, [])\n\n    const onClickAddProduct = useCallback((rowIndex, cellIndex) => {\n        return () => {\n            setData(x => {\n                let newData = [...x]\n                if (newData[rowIndex].cells[cellIndex].value) {\n                    let productItem = {\n                        Name: '',\n                        Amount: 0,\n                        Unit: 'KG',\n                        Purity: 0,\n                        Germination: 0,\n                        Lot: ''\n                    }\n                    newData[rowIndex].cells[cellIndex].value.push(productItem)\n                }\n                return newData\n            })\n        }\n    }, [])\n\n    const renderCell = useCallback((rowIndex, cellIndex) => {\n        const cell = data[rowIndex].cells[cellIndex]\n\n        switch (cell.type) {\n            case TableDataType.Date:\n                if (data[rowIndex].editing) {\n                    return (\n                        <DatePicker\n                            label=\"Select a date\"\n                            value={cell.value}\n                            onChange={(newValue) => {\n                                setData(x => {\n                                    let newData = [...x]\n                                    newData[rowIndex].cells[cellIndex].value = newValue\n                                    return newData\n                                })\n                            }}\n                            renderInput={(params) => <TextField {...params} size='small' />}\n                        />\n                    )\n                }\n\n                return moment(cell.value).format('MM/DD/YYYY')\n            case TableDataType.Text:\n                if (data[rowIndex].editing) {\n                    return (\n                        <DebounceTextareaAutosize value={cell.value} onChange={(value) => {\n                            setData(x => {\n                                let newData = [...x]\n                                newData[rowIndex].cells[cellIndex].value = value\n                                return newData\n                            })\n                        }} />\n                    )\n                }\n\n                return cell.value\n            case TableDataType.AutoComplete:\n                if (data[rowIndex].editing) {\n                    return (\n                        <Autocomplete\n                            options={options[cell.optionType]}\n                            getOptionLabel={option => option.name}\n                            renderOption={(props, option) => {\n                                return (\n                                  <span {...props} style={{ color: '#000' }}>\n                                    {option.name}\n                                  </span>\n                                );\n                              }}\n                            sx={{ width: 200 }}\n                            renderInput={(params) => <TextField\n                                {...params}\n                                label=\"Select a value\"\n                                size='small'\n                            />}\n                            value={options[cell.optionType].find(o => o.code === cell.value)}\n                            onChange={(event, newValue) => {\n                                setData(x => {\n                                    let newData = [...x]\n                                    newData[rowIndex].cells[cellIndex].value = newValue.code\n                                    return newData\n                                })\n                            }}\n                        />\n                    )\n                }\n\n                return cell.value\n\n            case TableDataType.Select:\n                if (data[rowIndex].editing) {\n                    return (\n                        <Select\n                            value={cell.value}\n                            size={'small'}\n                            sx={{ width: 200 }}\n                            onChange={(event) => {\n                                setData(x => {\n                                    let newData = [...x]\n                                    newData[rowIndex].cells[cellIndex].value = event.target.value\n                                    return newData\n                                })\n                            }}\n                        >\n                            {options[cell.optionType].map(o => (\n                                <MenuItem value={o.code}>{o.name}</MenuItem>\n                            ))}\n                        </Select>\n                    )\n                }\n\n                if (cell.optionType === OptionType.ShipmentStatus)\n                    return (\n                        <div\n                            style={{\n                                padding: '4px 8px',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                borderRadius: 4,\n                                backgroundColor: {Preparing: '#fff', Inprogress: '#1d8cf8', Done: '#0f0', Canceled: '#737375'}[cell.value],\n                                color: {Preparing: '#000', Inprogress: '#fff', Done: '#000', Canceled: '#fff'}[cell.value]\n                            }}\n                        >\n                            <div>{cell.value}</div>\n                        </div>\n                    )\n                return cell.value\n            case TableDataType.Custom.Product: {\n                let cellValues = cell.value || []\n                if (data[rowIndex].editing) {\n                    return (\n                        <div>\n                            {cellValues.map((item, valueIndex) => item.Deleted ? null : (\n                                <div style={{borderWidth: 1, borderColor: 'rgba(255, 255, 255, 0.16)', borderStyle: 'solid', borderRadius: 4, padding: 8, marginBottom: 8}}>\n                                    <DebounceTextField\n                                        value={item.Name}\n                                        label='Product name'\n                                        style={{width: '100%'}}\n                                        onChange={(newValue) => {\n                                            setData(x => {\n                                                let newData = [...x]\n                                                newData[rowIndex].cells[cellIndex].value[valueIndex].Name = newValue\n                                                return newData\n                                            })\n                                        }}\n                                    />\n                                    <div style={{display: 'flex', justifyContent: 'space-between', marginTop: 8}}>\n                                        <DebounceTextField \n                                            type='number' \n                                            style={{width: '48%'}} \n                                            label='Amount' \n                                            value={item.Amount}\n                                            onChange={(newValue) => {\n                                                setData(x => {\n                                                    let newData = [...x]\n                                                    newData[rowIndex].cells[cellIndex].value[valueIndex].Amount = newValue\n                                                    return newData\n                                                })\n                                            }} \n                                        />\n                                        <Autocomplete\n                                            style={{width: '48%'}}\n                                            options={options[OptionType.Unit]}\n                                            getOptionLabel={option => option.name}\n                                            renderOption={(props, option) => {\n                                                return (\n                                                <span {...props} style={{ color: '#000' }}>\n                                                    {option.name}\n                                                </span>\n                                                );\n                                            }}\n                                            sx={{ width: 200 }}\n                                            renderInput={(params) => <TextField\n                                                {...params}\n                                                label=\"Unit\"\n                                                size='small'\n                                            />}\n                                            value={options[OptionType.Unit].find(o => o.code === item.Unit)}\n                                            onChange={(event, newValue) => {\n                                                setData(x => {\n                                                    let newData = [...x]\n                                                    newData[rowIndex].cells[cellIndex].value[valueIndex].Unit = newValue.code\n                                                    return newData\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                    \n                                    <div style={{display: 'flex', justifyContent: 'space-between', marginTop: 8}}>\n                                        <DebounceTextField \n                                            type='number' \n                                            style={{width: '48%'}} \n                                            label='Purity'\n                                            value={item.Purity}\n                                            onChange={(newValue) => {\n                                                setData(x => {\n                                                    let newData = [...x]\n                                                    newData[rowIndex].cells[cellIndex].value[valueIndex].Purity = newValue\n                                                    return newData\n                                                })\n                                            }}\n                                        />\n                                        <DebounceTextField \n                                            type='number'\n                                            style={{width: '48%', fontSize: 12}} \n                                            label='Germination'\n                                            value={item.Germination}\n                                            onChange={(newValue) => {\n                                                setData(x => {\n                                                    let newData = [...x]\n                                                    newData[rowIndex].cells[cellIndex].value[valueIndex].Germination = newValue\n                                                    return newData\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                    <div style={{display: 'flex', justifyContent: 'space-between', marginTop: 8}}>\n                                        <DebounceTextField\n                                            value={item.Lot} \n                                            label='Lot' \n                                            style={{width: '48%'}}\n                                            onChange={(newValue) => {\n                                                setData(x => {\n                                                    let newData = [...x]\n                                                    newData[rowIndex].cells[cellIndex].value[valueIndex].Lot = newValue\n                                                    return newData\n                                                })\n                                            }}\n                                        />\n                                        <Button startIcon={<RemoveIcon />} color='error' variant='contained' size='small' onClick={onClickDeleteProduct(rowIndex, cellIndex, valueIndex)}>\n                                            Remove\n                                        </Button>\n                                    </div>\n                                </div>\n                            ))}\n    \n                            <div style={{marginTop: cellValues?.filter(val => !(val.Deleted)).length ? 24 : 0, display: 'flex', width: '100%', justifyContent: 'center'}}>\n                                <Button startIcon={<AddIcon />} color='primary' variant='contained' size='small' onClick={onClickAddProduct(rowIndex, cellIndex)}>\n                                    Add Product\n                                </Button>\n                            </div>\n                        </div>\n                    )\n                }\n\n                return (\n                    <div>\n                        {\n                            cellValues.filter(val => !(val.Deleted)).map((value, prodIndex) => (\n                                <div\n                                    key={`product-item-text-row-${rowIndex}-prod-${prodIndex}`}\n                                    style={{whiteSpace: 'initial', paddingLeft: 8, textIndent: -9, marginTop: prodIndex > 0 ? 4 : 0}}\n                                >\n                                    &bull; {`${value.Name}${value.Lot ? ' - Lot ' + value.Lot : ''}${value.Amount ? ' - ' + value.Amount + value.Unit : ''}${value.Purity ? ' - Purity ' + value.Purity : ''}${value.Germination ? ' - Germination ' + value.Germination : ''}`}\n                                </div>)\n                            )\n                        }\n                    </div>\n                )\n            }\n            default: return cell.value\n        }\n    }, [data, onClickAddProduct, onClickDeleteProduct])\n\n    const renderDataList = useCallback(() => {\n        return (\n            <div className='table-content'>\n                {data.map((row, rowIndex) => (\n                    <div key={`table-row-${rowIndex}`} className='table-row'>\n                        <div key={`table-cell-#`} className='table-cell' style={{display: 'flex', justifyContent: 'center'}}>\n                            {`${rowIndex}`}\n                            <div style={{display: 'flex', justifyContent: 'center', position: 'absolute', width: '100%', marginTop: 16}}>\n                                <Tooltip title='Delete'>\n                                    <IconButton size='small' onClick={onClickDeleteRow(rowIndex)}>\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </Tooltip>\n                                {row.editing ? (\n                                    <>\n                                        <Tooltip title='Save'>\n                                            <IconButton size='small' onClick={onClickSaveRow(rowIndex)}>\n                                                <CheckCircleIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title='Cancel'>\n                                            <IconButton size='small' onClick={onClickCancelEditRow(rowIndex)}>\n                                                <CancelIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </>\n                                ) : (\n                                    <Tooltip title='Edit'>\n                                        <IconButton size='small' onClick={onClickEditRow(rowIndex)}>\n                                            <EditIcon />\n                                        </IconButton>\n                                    </Tooltip>\n                                )}\n                            </div>\n                        </div>\n                        {row?.cells?.map((cell, cellIndex) => (\n                            <div\n                                key={`table-cell-${cellIndex}`}\n                                className='table-cell'\n                                style={{width: headerList[cellIndex].width}}\n                            >\n                                {renderCell(rowIndex, cellIndex)}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        )\n    }, [data, headerList, onClickCancelEditRow, onClickDeleteRow, onClickEditRow, onClickSaveRow, renderCell])\n\n    return (\n        <div className='table-container' style={{width: width}}>\n            {renderHeaderList()}\n            {renderDataList()}\n            <Tooltip title='Create new Order'>\n                <Fab color='primary' aria-label=\"add\" style={{position: 'fixed', zIndex: 2, right: '5vw', top: '80vh'}} onClick={onClickCreateNewRow}>\n                    <AddIcon />\n                </Fab>\n            </Tooltip>\n        </div>\n    )\n}\n  \nexport default Table\n  ","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/types.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextField/index.js",["148"],"import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport _ from 'lodash'\nimport { Input } from 'reactstrap';\nimport { TextField } from '@mui/material';\n\nconst DebounceTextField = ({\n    value = '',\n    onChange = (text) => {},\n    type='text',\n    style,\n    size='small',\n    label=\"Select a value\"\n}) => {\n    const [text, setText] = useState('')\n\n    useEffect(() => {\n        setText(value)\n    }, [value])\n\n    const debounceOnChange = useRef(_.debounce((text) => {\n        onChange(text)\n    }, 300)).current\n    \n    const onChangeText = useCallback((event) => {\n        debounceOnChange(event.target.value)\n        setText(event.target.value)\n    }, [debounceOnChange])\n\n    return (\n        <TextField\n            placeholder='Empty'\n            type={type}\n            onChange={onChangeText}\n            style={style}\n            label={label}\n            size={size}\n            value={text}\n        />\n    )\n}\n\nexport default DebounceTextField","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/data.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextareaAutosize/index.js",[],"/Users/necvn/Documents/inventory-management/src/services/api/index.js",[],"/Users/necvn/Documents/inventory-management/src/config.js",[],"/Users/necvn/Documents/inventory-management/src/controllers/import-management/index.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":2,"column":40,"nodeType":"155","messageId":"156","endLine":2,"endColumn":48},{"ruleId":"153","severity":1,"message":"157","line":5,"column":8,"nodeType":"155","messageId":"156","endLine":5,"endColumn":18},{"ruleId":"153","severity":1,"message":"158","line":9,"column":8,"nodeType":"155","messageId":"156","endLine":9,"endColumn":14},{"ruleId":"153","severity":1,"message":"159","line":10,"column":8,"nodeType":"155","messageId":"156","endLine":10,"endColumn":15},{"ruleId":"153","severity":1,"message":"160","line":11,"column":8,"nodeType":"155","messageId":"156","endLine":11,"endColumn":12},{"ruleId":"153","severity":1,"message":"161","line":12,"column":8,"nodeType":"155","messageId":"156","endLine":12,"endColumn":18},{"ruleId":"153","severity":1,"message":"162","line":13,"column":8,"nodeType":"155","messageId":"156","endLine":13,"endColumn":21},{"ruleId":"153","severity":1,"message":"163","line":14,"column":8,"nodeType":"155","messageId":"156","endLine":14,"endColumn":18},{"ruleId":"153","severity":1,"message":"164","line":15,"column":8,"nodeType":"155","messageId":"156","endLine":15,"endColumn":18},{"ruleId":"153","severity":1,"message":"165","line":16,"column":8,"nodeType":"155","messageId":"156","endLine":16,"endColumn":19},{"ruleId":"153","severity":1,"message":"166","line":17,"column":8,"nodeType":"155","messageId":"156","endLine":17,"endColumn":14},{"ruleId":"153","severity":1,"message":"167","line":18,"column":8,"nodeType":"155","messageId":"156","endLine":18,"endColumn":16},{"ruleId":"153","severity":1,"message":"168","line":19,"column":8,"nodeType":"155","messageId":"156","endLine":19,"endColumn":16},{"ruleId":"153","severity":1,"message":"169","line":22,"column":10,"nodeType":"155","messageId":"156","endLine":22,"endColumn":13},{"ruleId":"153","severity":1,"message":"170","line":13,"column":8,"nodeType":"155","messageId":"156","endLine":13,"endColumn":21},{"ruleId":"153","severity":1,"message":"171","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":15},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'PageHeader' is defined but never used.","'Basics' is defined but never used.","'Navbars' is defined but never used.","'Tabs' is defined but never used.","'Pagination' is defined but never used.","'Notifications' is defined but never used.","'Typography' is defined but never used.","'JavaScript' is defined but never used.","'NucleoIcons' is defined but never used.","'Signup' is defined but never used.","'Examples' is defined but never used.","'Download' is defined but never used.","'api' is defined but never used.","'AddCircleIcon' is defined but never used.","'Input' is defined but never used.","no-global-assign","no-unsafe-negation"]