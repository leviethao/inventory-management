[{"/Users/necvn/Documents/inventory-management/src/index.js":"1","/Users/necvn/Documents/inventory-management/src/App.js":"2","/Users/necvn/Documents/inventory-management/src/views/manage-import/Index.js":"3","/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/LandingPage.js":"4","/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/RegisterPage.js":"5","/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/ProfilePage.js":"6","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Footer/Footer.js":"7","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/PageHeader/PageHeader.js":"8","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/IndexNavbar.js":"9","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/ExamplesNavbar.js":"10","/Users/necvn/Documents/inventory-management/src/views/manage-import/variables/charts.js":"11","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Pagination.js":"12","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Navbars.js":"13","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Basics.js":"14","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Typography.js":"15","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/NucleoIcons.js":"16","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Notifications.js":"17","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Tabs.js":"18","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Signup.js":"19","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Download.js":"20","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/JavaScript.js":"21","/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Examples.js":"22","/Users/necvn/Documents/inventory-management/src/views/manage-import/ManageImport.js":"23","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/index.js":"24","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/types.js":"25","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextField/index.js":"26","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/data.js":"27","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextareaAutosize/index.js":"28","/Users/necvn/Documents/inventory-management/src/services/api/index.js":"29","/Users/necvn/Documents/inventory-management/src/config.js":"30","/Users/necvn/Documents/inventory-management/src/controllers/import-management/index.js":"31","/Users/necvn/Documents/inventory-management/src/utils/index.js":"32","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/SearchBar.js":"33","/Users/necvn/Documents/inventory-management/src/redux/store.js":"34","/Users/necvn/Documents/inventory-management/src/redux/reducers/index.js":"35","/Users/necvn/Documents/inventory-management/src/redux/reducers/common-reducer.js":"36","/Users/necvn/Documents/inventory-management/src/redux/types/index.js":"37","/Users/necvn/Documents/inventory-management/src/redux/types/common-type.js":"38","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Login/index.js":"39","/Users/necvn/Documents/inventory-management/src/redux/actions/index.js":"40","/Users/necvn/Documents/inventory-management/src/redux/actions/common-action.js":"41"},{"size":144,"mtime":1645624492587,"results":"42","hashOfConfig":"43"},{"size":2383,"mtime":1647873223810,"results":"44","hashOfConfig":"43"},{"size":2167,"mtime":1645635613169,"results":"45","hashOfConfig":"43"},{"size":22849,"mtime":1645635498077,"results":"46","hashOfConfig":"43"},{"size":7843,"mtime":1645635518340,"results":"47","hashOfConfig":"43"},{"size":16841,"mtime":1645635537949,"results":"48","hashOfConfig":"43"},{"size":4181,"mtime":1646270592490,"results":"49","hashOfConfig":"43"},{"size":1577,"mtime":1645635443668,"results":"50","hashOfConfig":"43"},{"size":8061,"mtime":1647873248824,"results":"51","hashOfConfig":"43"},{"size":5825,"mtime":1607439708000,"results":"52","hashOfConfig":"43"},{"size":2991,"mtime":1607439708000,"results":"53","hashOfConfig":"43"},{"size":7228,"mtime":1607439708000,"results":"54","hashOfConfig":"43"},{"size":17509,"mtime":1607439708000,"results":"55","hashOfConfig":"43"},{"size":9790,"mtime":1607439708000,"results":"56","hashOfConfig":"43"},{"size":7740,"mtime":1607439708000,"results":"57","hashOfConfig":"43"},{"size":3660,"mtime":1607439708000,"results":"58","hashOfConfig":"43"},{"size":2517,"mtime":1607439708000,"results":"59","hashOfConfig":"43"},{"size":8415,"mtime":1607439708000,"results":"60","hashOfConfig":"43"},{"size":5638,"mtime":1607439708000,"results":"61","hashOfConfig":"43"},{"size":3754,"mtime":1607439708000,"results":"62","hashOfConfig":"43"},{"size":15646,"mtime":1607439708000,"results":"63","hashOfConfig":"43"},{"size":2135,"mtime":1607439708000,"results":"64","hashOfConfig":"43"},{"size":2297,"mtime":1647869811719,"results":"65","hashOfConfig":"43"},{"size":28505,"mtime":1647871819397,"results":"66","hashOfConfig":"43"},{"size":382,"mtime":1646844095186,"results":"67","hashOfConfig":"43"},{"size":1048,"mtime":1647864104373,"results":"68","hashOfConfig":"43"},{"size":15644,"mtime":1647163102141,"results":"69","hashOfConfig":"43"},{"size":864,"mtime":1647072434460,"results":"70","hashOfConfig":"43"},{"size":164,"mtime":1645624492587,"results":"71","hashOfConfig":"43"},{"size":119,"mtime":1647872243405,"results":"72","hashOfConfig":"43"},{"size":768,"mtime":1646836294060,"results":"73","hashOfConfig":"43"},{"size":328,"mtime":1647009943880,"results":"74","hashOfConfig":"43"},{"size":2042,"mtime":1647161943941,"results":"75","hashOfConfig":"43"},{"size":765,"mtime":1647871086123,"results":"76","hashOfConfig":"43"},{"size":166,"mtime":1647862523733,"results":"77","hashOfConfig":"43"},{"size":346,"mtime":1647870592954,"results":"78","hashOfConfig":"43"},{"size":30,"mtime":1647862523735,"results":"79","hashOfConfig":"43"},{"size":59,"mtime":1647862523735,"results":"80","hashOfConfig":"43"},{"size":1786,"mtime":1647873327270,"results":"81","hashOfConfig":"43"},{"size":32,"mtime":1647862523731,"results":"82","hashOfConfig":"43"},{"size":177,"mtime":1647862523730,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1m858vu",{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/necvn/Documents/inventory-management/src/index.js",[],["172","173"],"/Users/necvn/Documents/inventory-management/src/App.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/Index.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/LandingPage.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/RegisterPage.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/examples/ProfilePage.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Footer/Footer.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/PageHeader/PageHeader.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/IndexNavbar.js",["174","175","176","177","178","179","180","181","182","183","184"],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Navbars/ExamplesNavbar.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/variables/charts.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Pagination.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Navbars.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Basics.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Typography.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/NucleoIcons.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Notifications.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Tabs.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Signup.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Download.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/JavaScript.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/IndexSections/Examples.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/ManageImport.js",["185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"import React, { useState } from \"react\";\n\n// core components\nimport IndexNavbar from \"./components/Navbars/IndexNavbar.js\";\nimport PageHeader from \"./components/PageHeader/PageHeader.js\";\nimport Footer from \"./components/Footer/Footer.js\";\n\n// sections for this page/view\nimport Basics from \"./IndexSections/Basics.js\";\nimport Navbars from \"./IndexSections/Navbars.js\";\nimport Tabs from \"./IndexSections/Tabs.js\";\nimport Pagination from \"./IndexSections/Pagination.js\";\nimport Notifications from \"./IndexSections/Notifications.js\";\nimport Typography from \"./IndexSections/Typography.js\";\nimport JavaScript from \"./IndexSections/JavaScript.js\";\nimport NucleoIcons from \"./IndexSections/NucleoIcons.js\";\nimport Signup from \"./IndexSections/Signup.js\";\nimport Examples from \"./IndexSections/Examples.js\";\nimport Download from \"./IndexSections/Download.js\";\nimport Table from \"./components/Table/index.js\";\nimport { headerList, objectToRow } from \"./components/Table/data.js\";\nimport { api } from \"services/api/index.js\";\nimport ImportManagementController from \"../../controllers/import-management/index.js\";\nimport { useSelector } from \"react-redux\";\n\nexport default function ManageImport() {\n  const [dataList, setDataList] = useState([])\n  const common = useSelector(state => state.common)\n\n  React.useEffect(() => {\n    document.body.classList.toggle(\"index-page\");\n    ImportManagementController.getOrders().then(res => {\n      console.log('data: ', res.data)\n      const rows = res.data.map(item => objectToRow(item))\n      setDataList(rows)\n      console.log('rows: ', rows)\n    })\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      document.body.classList.toggle(\"index-page\");\n    };\n  },[]);\n\n  return (\n    <>\n      <IndexNavbar />\n      <div className=\"wrapper\">\n        {/* <PageHeader /> */}\n        <div className=\"main\">\n          <Table headerList={headerList} dataList={dataList} editable={common.hasLogin} />\n          {/* <Basics />\n          <Navbars />\n          <Tabs />\n          <Pagination />\n          <Notifications />\n          <Typography />\n          <JavaScript />\n          <NucleoIcons />\n          <Signup />\n          <Examples />\n          <Download /> */}\n        </div>\n        {/* <Footer /> */}\n      </div>\n    </>\n  );\n}\n","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/index.js",["199","200","201"],"import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport './styles.css'\nimport { headerList, dataList, options, createNewRow, rowToObject } from './data'\nimport DatePicker from '@mui/lab/DatePicker';\nimport TextField from '@mui/material/TextField';\nimport { OptionType, TableDataType } from './types'\nimport DebounceTextField from '../DebounceTextField';\nimport { Autocomplete, Button, Fab, Tooltip } from '@mui/material';\nimport DebounceTextareaAutosize from '../DebounceTextareaAutosize';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/RemoveCircle'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddCircleIcon from '@mui/icons-material/AddCircle'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle'\nimport EditIcon from '@mui/icons-material/Edit'\nimport CancelIcon from '@mui/icons-material/Cancel'\nimport IconButton from '@mui/material/IconButton';\nimport moment from 'moment';\nimport ImportManagementController from '../../../../controllers/import-management'\nimport Select from \"@mui/material/Select\"\nimport MenuItem from \"@mui/material/MenuItem\"\nimport { checkOrderETANotif } from '../../../../utils';\nimport _ from 'lodash'\nimport SearchBar from '../SearchBar';\nconst { v4: uuidv4 } = require('uuid')\n\nconst headerListDefault = [...headerList]\nconst dataListDefault = [...dataList]\nconst ICON_COLOR = '#888888'\n\nconst Table = ({headerList = headerListDefault, dataList = dataListDefault, editable = true, ...props}) => {\n    const [width, setWidth] = useState('100%')\n    const headerRef = useRef()\n    const [data, setData] = useState(dataList)\n    const [dataShow, setDataShow] = useState(dataList)\n    const [searchText, setSearchText] = useState('')\n\n    const moveDoneRowsToEndOfList = useCallback((newData) => {\n        let notDoneOrderList = [...newData]\n        let doneOrderList = []\n        for (let i = newData.length - 1; i >= 0; i--) {\n            let row = newData[i]\n            if (row.cells[11].value == 'Done') {\n                doneOrderList.unshift(row)\n                notDoneOrderList.splice(i, 1)\n            }\n        }\n\n        const sorted = [...notDoneOrderList, ...doneOrderList]\n        return sorted\n    }, [])\n\n    useEffect(() => {\n        function myFunction() {\n            var sticky = headerRef.current.getBoundingClientRect().top;\n            // var leftInit = headerRef.current.getBoundingClientRect().left;\n            if (window.pageYOffset > sticky) {\n                headerRef.current.classList.add(\"sticky\");\n                headerRef.current.style.left = `${0 - window.pageXOffset}px`\n            } else {\n                headerRef.current.classList.remove(\"sticky\");\n            }\n        }\n        window.addEventListener('scroll', myFunction)\n        return () => {\n            window.removeEventListener('scroll', myFunction)\n        }\n    }, [])\n\n    useEffect(() => {\n        const mappedData = _.cloneDeep(dataList).map(item => {\n            item.tempId = item.Id || uuidv4()\n            return item\n        })\n\n        const sorted = moveDoneRowsToEndOfList(mappedData)\n\n        setData(sorted)\n        setDataShow(sorted)\n    }, [dataList, moveDoneRowsToEndOfList])\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (headerRef.current?.scrollWidth) {\n            setWidth(headerRef.current?.scrollWidth)\n            }\n        }\n        \n        handleResize()\n\n        window.addEventListener('resize', handleResize)\n\n        return () => {\n            window.removeEventListener('resize', handleResize)\n        }\n    }, [headerList, setWidth])\n\n    const onClickCreateNewRow = useCallback(() => {\n        setData(x => {\n            let newData = [...x]\n            newData.unshift({cells: createNewRow({}), editing: true, tempId: uuidv4()})\n            return newData\n        })\n    }, [])\n\n    console.log('data: ', data)\n\n    const renderHeaderList = useCallback(() => {\n        return (\n            <div ref={headerRef} className='table-header'>\n                <div\n                    key={`table-header-item-#`}\n                    className='table-header-item'\n                >\n                    {'#'}\n                </div>\n                {headerList.map(item => (\n                    <>\n                        {item.visible === false ? null : (\n                            <div\n                                key={`table-header-item-${item.title}`}\n                                className='table-header-item'\n                                style={{width: item.width}}\n                            >\n                                {item.title}\n                            </div>\n                        )}\n                    </>\n                ))}\n            </div>\n        )\n    }, [headerList])\n\n    const onClickEditRow = useCallback((rowTempId) => {\n        return () => {\n            setData(x => {\n                let newData = [...x]\n                let row = newData.find(row => row.tempId === rowTempId)\n                if (row) row.editing = true\n                return newData\n            })\n        }\n    }, [])\n\n    const onClickCancelEditRow = useCallback((rowTempId) => {\n        return () => {\n            setData(x => {\n                let newData = [...x]\n                let rowIndex = newData.findIndex(row => row.tempId === rowTempId)\n                const oldRow = dataList.find(row => row.Id == newData[rowIndex].Id)\n                newData[rowIndex] = _.cloneDeep(oldRow)\n                return newData\n            })\n        }\n    }, [dataList])\n\n    const onClickSaveRow = useCallback((rowTempId) => {\n        return async () => {\n            let row = data.find(r => r.tempId === rowTempId)\n            const order = rowToObject(row.cells, row.Id)\n            const result = await ImportManagementController.updateOrder(order)\n            if (result.isSuccess) {\n                setData(x => {\n                    let newData = [...x]\n                    let row = newData.find(row => row.tempId === rowTempId)\n                    row.editing = false\n                    const sorted = moveDoneRowsToEndOfList(newData)\n                    return sorted\n                })\n            }\n        }\n    }, [data, moveDoneRowsToEndOfList])\n\n    const onClickDeleteRow = useCallback((rowTempId) => {\n        return async () => {\n            let row = data.find(row => row.tempId === rowTempId)\n            const result = await ImportManagementController.deleteOrder(row.Id)\n            if (result.isSuccess) {\n                setData(x => {\n                    let newData = [...x]\n                    let rowIndex = newData.findIndex(row => row.tempId === rowTempId)\n                    newData.splice(rowIndex, 1)\n                    return newData\n                })\n            }\n        }\n    }, [data])\n\n    const onClickDeleteProduct = useCallback((rowTempId, cellIndex, productIndex) => {\n        return () => {\n            setData(x => {\n                let newData = [...x]\n                let row = newData.find(row => row.tempId === rowTempId)\n                if (row.cells[cellIndex].value) {\n                    row.cells[cellIndex].value[productIndex].Deleted = true\n                }\n                return newData\n            })\n        }\n    }, [])\n\n    const onClickAddProduct = useCallback((rowTempId, cellIndex) => {\n        return (event) => {\n            setData(x => {\n                let newData = [...x]\n                let row = newData.find(row => row.tempId === rowTempId)\n                row.cells[cellIndex].value = row.cells[cellIndex].value || []\n                let productItem = {\n                    Name: '',\n                    Amount: 0,\n                    Unit: 'KG',\n                    Purity: 0,\n                    Germination: 0,\n                    Lot: ''\n                }\n                row.cells[cellIndex].value.push(productItem)\n                \n                return newData\n            })\n\n            const productItem =  event.target?.closest(\".product-item-editing\")\n            const listEl = productItem?.getElementsByClassName('product-list')[0]\n            setTimeout(() => {\n                listEl.scrollTop = listEl.scrollHeight\n                const productNameEl = listEl.lastChild?.getElementsByClassName('product-name')[0]\n                const productNameInputEl = productNameEl?.getElementsByTagName('input')[0]\n                productNameInputEl?.focus()\n            }, 500)\n        }\n    }, [])\n\n    const renderCell = useCallback((rowTempId, cellIndex) => {\n        let row = data.find(row => row.tempId === rowTempId)\n        const cell = row.cells[cellIndex]\n\n        switch (cell.type) {\n            case TableDataType.Date:\n                if (row.editing) {\n                    return (\n                        <DatePicker\n                            label=\"Select a date\"\n                            value={cell.value}\n                            onChange={(newValue) => {\n                                setData(x => {\n                                    let newData = [...x]\n                                    let row = newData.find(row => row.tempId === rowTempId)\n                                    row.cells[cellIndex].value = newValue\n                                    return newData\n                                })\n                            }}\n                            renderInput={(params) => <TextField {...params} size='small' />}\n                        />\n                    )\n                }\n\n                return moment(cell.value).format('MM/DD/YYYY')\n            case TableDataType.Text:\n                if (row.editing) {\n                    return (\n                        <div style={{display: 'flex'}}>\n                            <DebounceTextareaAutosize value={cell.value} onChange={(value) => {\n                                setData(x => {\n                                    let newData = [...x]\n                                    let row = newData.find(row => row.tempId === rowTempId)\n                                    row.cells[cellIndex].value = value\n                                    return newData\n                                })\n                            }} />\n                        </div>\n                    )\n                }\n\n                return cell.value\n            case TableDataType.AutoComplete:\n                if (row.editing) {\n                    return (\n                        <Autocomplete\n                            options={options[cell.optionType]}\n                            getOptionLabel={option => option.name}\n                            renderOption={(props, option) => {\n                                return (\n                                  <span {...props} style={{ color: '#000' }}>\n                                    {option.name}\n                                  </span>\n                                );\n                              }}\n                            sx={{ width: '100%' }}\n                            renderInput={(params) => <TextField\n                                {...params}\n                                label=\"Select a value\"\n                                size='small'\n                            />}\n                            value={options[cell.optionType].find(o => o.code === cell.value)}\n                            onChange={(event, newValue) => {\n                                setData(x => {\n                                    let newData = [...x]\n                                    let row = newData.find(row => row.tempId === rowTempId)\n                                    row.cells[cellIndex].value = newValue.code\n                                    return newData\n                                })\n                            }}\n                        />\n                    )\n                }\n\n                return cell.value\n\n            case TableDataType.Select:\n                if (row.editing) {\n                    return (\n                        <Select\n                            value={cell.value}\n                            size={'small'}\n                            sx={{ width: '100%' }}\n                            onChange={(event) => {\n                                setData(x => {\n                                    let newData = [...x]\n                                    let row = newData.find(row => row.tempId === rowTempId)\n                                    row.cells[cellIndex].value = event.target.value\n                                    return newData\n                                })\n                            }}\n                        >\n                            {options[cell.optionType].map((o, i) => (\n                                <MenuItem key={`select-item-${i}`} value={o.code}>{o.name}</MenuItem>\n                            ))}\n                        </Select>\n                    )\n                }\n\n                if (cell.optionType === OptionType.ShipmentStatus)\n                    return (\n                        <div\n                            style={{\n                                padding: '4px 8px',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                borderRadius: 4,\n                                backgroundColor: {Preparing: '#fff', Inprogress: '#1d8cf8', Done: '#0f0', Canceled: '#737375'}[cell.value],\n                                color: {Preparing: '#000', Inprogress: '#fff', Done: '#000', Canceled: '#fff'}[cell.value]\n                            }}\n                        >\n                            <div>{cell.value}</div>\n                        </div>\n                    )\n                return cell.value\n            case TableDataType.Custom.Product: {\n                let cellValues = cell.value || []\n                if (row.editing) {\n                    return (\n                        <div className='product-item-editing'>\n                            <div style={{maxHeight: 300, overflowY: 'scroll'}} className='product-list'>\n                                {cellValues.map((item, valueIndex) => item.Deleted ? null : (\n                                    <div key={`product-item-${row.tempId}-${valueIndex}`} style={{borderWidth: 1, borderColor: 'rgba(0, 0, 0, 0.16)', borderStyle: 'solid', borderRadius: 4, padding: 8, marginBottom: 8}} className='product-item'>\n                                        <DebounceTextField\n                                            className='product-name'\n                                            value={item.Name}\n                                            label='Product name'\n                                            style={{width: '100%'}}\n                                            onChange={(newValue) => {\n                                                setData(x => {\n                                                    let newData = [...x]\n                                                    let row = newData.find(row => row.tempId === rowTempId)\n                                                    row.cells[cellIndex].value[valueIndex].Name = newValue\n                                                    return newData\n                                                })\n                                            }}\n                                        />\n                                        <div style={{display: 'flex', justifyContent: 'space-between', marginTop: 8}}>\n                                            <DebounceTextField \n                                                type='number' \n                                                style={{width: '48%'}} \n                                                label='Amount' \n                                                value={item.Amount}\n                                                onChange={(newValue) => {\n                                                    setData(x => {\n                                                        let newData = [...x]\n                                                        let row = newData.find(row => row.tempId === rowTempId)\n                                                        row.cells[cellIndex].value[valueIndex].Amount = newValue\n                                                        return newData\n                                                    })\n                                                }} \n                                            />\n                                            <Autocomplete\n                                                style={{width: '48%'}}\n                                                options={options[OptionType.Unit]}\n                                                getOptionLabel={option => option.name}\n                                                renderOption={(props, option) => {\n                                                    return (\n                                                    <span {...props} style={{ color: '#000' }}>\n                                                        {option.name}\n                                                    </span>\n                                                    );\n                                                }}\n                                                sx={{ width: 200 }}\n                                                renderInput={(params) => <TextField\n                                                    {...params}\n                                                    label=\"Unit\"\n                                                    size='small'\n                                                />}\n                                                value={options[OptionType.Unit].find(o => o.code === item.Unit)}\n                                                onChange={(event, newValue) => {\n                                                    setData(x => {\n                                                        let newData = [...x]\n                                                        let row = newData.find(row => row.tempId === rowTempId)\n                                                        row.cells[cellIndex].value[valueIndex].Unit = newValue.code\n                                                        return newData\n                                                    })\n                                                }}\n                                            />\n                                        </div>\n                                        \n                                        <div style={{display: 'flex', justifyContent: 'space-between', marginTop: 8}}>\n                                            <DebounceTextField \n                                                type='number' \n                                                style={{width: '48%'}} \n                                                label='Purity'\n                                                value={item.Purity}\n                                                onChange={(newValue) => {\n                                                    setData(x => {\n                                                        let newData = [...x]\n                                                        let row = newData.find(row => row.tempId === rowTempId)\n                                                        row.cells[cellIndex].value[valueIndex].Purity = newValue\n                                                        return newData\n                                                    })\n                                                }}\n                                            />\n                                            <DebounceTextField \n                                                type='number'\n                                                style={{width: '48%', fontSize: 12}} \n                                                label='Germination'\n                                                value={item.Germination}\n                                                onChange={(newValue) => {\n                                                    setData(x => {\n                                                        let newData = [...x]\n                                                        let row = newData.find(row => row.tempId === rowTempId)\n                                                        row.cells[cellIndex].value[valueIndex].Germination = newValue\n                                                        return newData\n                                                    })\n                                                }}\n                                            />\n                                        </div>\n                                        <div style={{display: 'flex', justifyContent: 'space-between', marginTop: 8}}>\n                                            <DebounceTextField\n                                                value={item.Lot} \n                                                label='Lot' \n                                                style={{width: '48%'}}\n                                                onChange={(newValue) => {\n                                                    setData(x => {\n                                                        let newData = [...x]\n                                                        let row = newData.find(row => row.tempId === rowTempId)\n                                                        row.cells[cellIndex].value[valueIndex].Lot = newValue\n                                                        return newData\n                                                    })\n                                                }}\n                                            />\n                                            <Button startIcon={<RemoveIcon />} color='error' variant='contained' size='small' onClick={onClickDeleteProduct(row.tempId, cellIndex, valueIndex)}>\n                                                Remove\n                                            </Button>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                            <div style={{marginTop: cellValues?.filter(val => !(val.Deleted)).length ? 24 : 0, display: 'flex', width: '100%', justifyContent: 'center'}}>\n                                <Button startIcon={<AddIcon />} color='primary' variant='contained' size='small' onClick={onClickAddProduct(row.tempId, cellIndex)}>\n                                    Add Product\n                                </Button>\n                            </div>\n                        </div>\n                    )\n                }\n\n                return (\n                    <div>\n                        {\n                            cellValues.filter(val => !(val.Deleted)).map((value, prodIndex) => (\n                                <div\n                                    key={`product-item-text-row-${row.tempId}-prod-${prodIndex}`}\n                                    style={{whiteSpace: 'initial', paddingLeft: 8, textIndent: -9, marginTop: prodIndex > 0 ? 4 : 0}}\n                                >\n                                    &bull; {`${value.Name}${value.Lot ? ' - Lot ' + value.Lot : ''}${value.Amount ? ' - ' + value.Amount + value.Unit : ''}${value.Purity ? ' - Purity ' + value.Purity : ''}${value.Germination ? ' - Germination ' + value.Germination : ''}`}\n                                </div>)\n                            )\n                        }\n                    </div>\n                )\n            }\n            default: return cell.value\n        }\n    }, [data, onClickAddProduct, onClickDeleteProduct])\n\n    const renderDataList = useCallback(() => {\n        return (\n            <div className='table-content'>\n                {dataShow.map((row, rowIndex) => (\n                    <div key={`table-row-${rowIndex}`} className={`table-row ${checkOrderETANotif(row) ? 'order-ETA-notif' : ''}`}>\n                        <div key={`table-cell-#`} className='table-cell' style={{display: 'flex', justifyContent: 'center'}}>\n                            {`${rowIndex}`}\n                            <div style={{display: editable ? 'flex' : 'none', justifyContent: 'center', position: 'absolute', width: '100%', marginTop: 16}}>\n                                <Tooltip title='Delete'>\n                                    <IconButton sx={{width: 32, height: 32}} onClick={onClickDeleteRow(row.tempId)}>\n                                        <DeleteIcon sx={{ color: ICON_COLOR, width: 16, height: 16}} />\n                                    </IconButton>\n                                </Tooltip>\n                                {row.editing ? (\n                                    <>\n                                        <Tooltip title='Save'>\n                                            <IconButton sx={{width: 32, height: 32}} onClick={onClickSaveRow(row.tempId)}>\n                                                <CheckCircleIcon sx={{ color: ICON_COLOR, width: 16, height: 16 }} />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title='Cancel'>\n                                            <IconButton sx={{width: 32, height: 32}} onClick={onClickCancelEditRow(row.tempId)}>\n                                                <CancelIcon sx={{ color: ICON_COLOR, width: 16, height: 16 }} />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </>\n                                ) : (\n                                    <Tooltip title='Edit'>\n                                        <IconButton sx={{width: 32, height: 32}} onClick={onClickEditRow(row.tempId)}>\n                                            <EditIcon sx={{ color: ICON_COLOR, width: 16, height: 16 }} />\n                                        </IconButton>\n                                    </Tooltip>\n                                )}\n                            </div>\n                        </div>\n                        {row?.cells?.map((cell, cellIndex) => (\n                            <>\n                            {\n                                headerList[cellIndex].visible === false ? null : (\n                                    <div\n                                        key={`table-cell-${cellIndex}`}\n                                        className='table-cell wrap'\n                                        style={{width: headerList[cellIndex].width, maxHeight: row.editing ? 400 : 200, overflowY: 'scroll'}}\n                                    >\n                                        {renderCell(row.tempId, cellIndex)}\n                                    </div>\n                                )\n                            }\n                            </>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        )\n    }, [dataShow, headerList, onClickCancelEditRow, onClickDeleteRow, onClickEditRow, onClickSaveRow, renderCell, editable])\n\n    useEffect(() => {\n        setDataShow(x => {\n            let listToShow = []\n            if (searchText?.trim()) {\n                for (let row of data) {\n                    const supplier = (row.cells[1]?.value || '').trim().toLowerCase()\n                    const value = (searchText || '').trim().toLowerCase()\n                    if (supplier.search(value) >= 0) {\n                        listToShow.push(row)\n                    }\n                }\n            } else {\n                listToShow = [...data]\n            }\n\n            return listToShow\n        })\n    }, [data, searchText])\n\n    return (\n        <div className='table-container' style={{width: width}}>\n            <SearchBar onSearch={setSearchText} />\n            {renderHeaderList()}\n            {renderDataList()}\n            {editable ? (\n                <Tooltip title='Create new Order'>\n                    <Fab color='primary' aria-label=\"add\" style={{position: 'fixed', zIndex: 2, right: '5vw', top: '80vh'}} onClick={onClickCreateNewRow}>\n                        <AddIcon />\n                    </Fab>\n                </Tooltip>\n            ) : null}\n        </div>\n    )\n}\n  \nexport default Table\n  ","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/types.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextField/index.js",["202"],"import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport _ from 'lodash'\nimport { Input } from 'reactstrap';\nimport { TextField } from '@mui/material';\n\nconst DebounceTextField = ({\n    value = '',\n    onChange = (text) => {},\n    type='text',\n    style,\n    size='small',\n    label=\"Select a value\",\n    placeholder = 'Empty',\n    ...props\n}) => {\n    const [text, setText] = useState('')\n\n    useEffect(() => {\n        setText(value)\n    }, [value])\n\n    const debounceOnChange = useRef(_.debounce((text) => {\n        onChange(text)\n    }, 300)).current\n    \n    const onChangeText = useCallback((event) => {\n        debounceOnChange(event.target.value)\n        setText(event.target.value)\n    }, [debounceOnChange])\n\n    return (\n        <TextField\n            {...props}\n            placeholder={placeholder}\n            type={type}\n            onChange={onChangeText}\n            style={style}\n            label={label}\n            size={size}\n            value={text}\n        />\n    )\n}\n\nexport default DebounceTextField","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Table/data.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/DebounceTextareaAutosize/index.js",[],"/Users/necvn/Documents/inventory-management/src/services/api/index.js",[],"/Users/necvn/Documents/inventory-management/src/config.js",[],"/Users/necvn/Documents/inventory-management/src/controllers/import-management/index.js",[],"/Users/necvn/Documents/inventory-management/src/utils/index.js",["203"],"export const subtractDateInDays = (date1, date2) => {\n    return (date1 - date2) / (24 * 60 * 60 * 1000)\n}\n\nexport const checkOrderETANotif = (order) => {\n    const nearDue = subtractDateInDays(new Date(order?.cells[7].value), new Date()) < 7\n    const isDone = order?.cells[11].value == 'Done'\n    return (nearDue && !isDone)\n}","/Users/necvn/Documents/inventory-management/src/views/manage-import/components/SearchBar.js",[],"/Users/necvn/Documents/inventory-management/src/redux/store.js",["204"],"import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../redux/reducers';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nconst loggerMiddleware = createLogger();\n\nconst persistConfig = {\n  key: 'root',\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n };\n\n const pReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  pReducer,\n  // rootReducer,\n  applyMiddleware(\n    thunkMiddleware,\n    // loggerMiddleware\n  )\n);\n\nexport const persistor = persistStore(store);","/Users/necvn/Documents/inventory-management/src/redux/reducers/index.js",[],"/Users/necvn/Documents/inventory-management/src/redux/reducers/common-reducer.js",[],"/Users/necvn/Documents/inventory-management/src/redux/types/index.js",[],"/Users/necvn/Documents/inventory-management/src/redux/types/common-type.js",[],"/Users/necvn/Documents/inventory-management/src/views/manage-import/components/Login/index.js",[],"/Users/necvn/Documents/inventory-management/src/redux/actions/index.js",[],"/Users/necvn/Documents/inventory-management/src/redux/actions/common-action.js",[],{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":25,"column":3,"nodeType":"211","messageId":"212","endLine":25,"endColumn":17},{"ruleId":"209","severity":1,"message":"213","line":26,"column":3,"nodeType":"211","messageId":"212","endLine":26,"endColumn":15},{"ruleId":"209","severity":1,"message":"214","line":27,"column":3,"nodeType":"211","messageId":"212","endLine":27,"endColumn":15},{"ruleId":"209","severity":1,"message":"215","line":28,"column":3,"nodeType":"211","messageId":"212","endLine":28,"endColumn":23},{"ruleId":"209","severity":1,"message":"216","line":31,"column":3,"nodeType":"211","messageId":"212","endLine":31,"endColumn":10},{"ruleId":"209","severity":1,"message":"217","line":32,"column":3,"nodeType":"211","messageId":"212","endLine":32,"endColumn":10},{"ruleId":"209","severity":1,"message":"218","line":33,"column":3,"nodeType":"211","messageId":"212","endLine":33,"endColumn":6},{"ruleId":"209","severity":1,"message":"219","line":35,"column":3,"nodeType":"211","messageId":"212","endLine":35,"endColumn":6},{"ruleId":"209","severity":1,"message":"220","line":36,"column":3,"nodeType":"211","messageId":"212","endLine":36,"endColumn":6},{"ruleId":"209","severity":1,"message":"221","line":53,"column":9,"nodeType":"211","messageId":"212","endLine":53,"endColumn":20},{"ruleId":"209","severity":1,"message":"222","line":76,"column":9,"nodeType":"211","messageId":"212","endLine":76,"endColumn":25},{"ruleId":"209","severity":1,"message":"223","line":5,"column":8,"nodeType":"211","messageId":"212","endLine":5,"endColumn":18},{"ruleId":"209","severity":1,"message":"224","line":6,"column":8,"nodeType":"211","messageId":"212","endLine":6,"endColumn":14},{"ruleId":"209","severity":1,"message":"225","line":9,"column":8,"nodeType":"211","messageId":"212","endLine":9,"endColumn":14},{"ruleId":"209","severity":1,"message":"226","line":10,"column":8,"nodeType":"211","messageId":"212","endLine":10,"endColumn":15},{"ruleId":"209","severity":1,"message":"227","line":11,"column":8,"nodeType":"211","messageId":"212","endLine":11,"endColumn":12},{"ruleId":"209","severity":1,"message":"228","line":12,"column":8,"nodeType":"211","messageId":"212","endLine":12,"endColumn":18},{"ruleId":"209","severity":1,"message":"229","line":13,"column":8,"nodeType":"211","messageId":"212","endLine":13,"endColumn":21},{"ruleId":"209","severity":1,"message":"230","line":14,"column":8,"nodeType":"211","messageId":"212","endLine":14,"endColumn":18},{"ruleId":"209","severity":1,"message":"231","line":15,"column":8,"nodeType":"211","messageId":"212","endLine":15,"endColumn":18},{"ruleId":"209","severity":1,"message":"232","line":16,"column":8,"nodeType":"211","messageId":"212","endLine":16,"endColumn":19},{"ruleId":"209","severity":1,"message":"233","line":17,"column":8,"nodeType":"211","messageId":"212","endLine":17,"endColumn":14},{"ruleId":"209","severity":1,"message":"234","line":18,"column":8,"nodeType":"211","messageId":"212","endLine":18,"endColumn":16},{"ruleId":"209","severity":1,"message":"235","line":19,"column":8,"nodeType":"211","messageId":"212","endLine":19,"endColumn":16},{"ruleId":"209","severity":1,"message":"236","line":22,"column":10,"nodeType":"211","messageId":"212","endLine":22,"endColumn":13},{"ruleId":"209","severity":1,"message":"237","line":13,"column":8,"nodeType":"211","messageId":"212","endLine":13,"endColumn":21},{"ruleId":"238","severity":1,"message":"239","line":43,"column":37,"nodeType":"240","messageId":"241","endLine":43,"endColumn":39},{"ruleId":"238","severity":1,"message":"239","line":150,"column":60,"nodeType":"240","messageId":"241","endLine":150,"endColumn":62},{"ruleId":"209","severity":1,"message":"242","line":3,"column":10,"nodeType":"211","messageId":"212","endLine":3,"endColumn":15},{"ruleId":"238","severity":1,"message":"239","line":7,"column":43,"nodeType":"240","messageId":"241","endLine":7,"endColumn":45},{"ruleId":"209","severity":1,"message":"243","line":9,"column":7,"nodeType":"211","messageId":"212","endLine":9,"endColumn":23},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-unused-vars","'DropdownToggle' is defined but never used.","Identifier","unusedVar","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Nav' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'changeColor' is assigned a value but never used.","'scrollToDownload' is assigned a value but never used.","'PageHeader' is defined but never used.","'Footer' is defined but never used.","'Basics' is defined but never used.","'Navbars' is defined but never used.","'Tabs' is defined but never used.","'Pagination' is defined but never used.","'Notifications' is defined but never used.","'Typography' is defined but never used.","'JavaScript' is defined but never used.","'NucleoIcons' is defined but never used.","'Signup' is defined but never used.","'Examples' is defined but never used.","'Download' is defined but never used.","'api' is defined but never used.","'AddCircleIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Input' is defined but never used.","'loggerMiddleware' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]